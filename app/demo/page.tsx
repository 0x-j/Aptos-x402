"use client";

import { useState } from "react";
import { CheckCircle } from "lucide-react";
import { x402axios } from "../../lib/x402-axios";

export default function Home() {
  const [loading, setLoading] = useState(false);
  const [response, setResponse] = useState<any>(null);
  const [step, setStep] = useState<"initial" | "success">("initial");
  const [paymentDetails, setPaymentDetails] = useState<any>(null);
  const [timing, setTiming] = useState<any>(null);

  // Demo private key (generated by scripts/generate-account.ts)
  const DEMO_PRIVATE_KEY = process.env.NEXT_PUBLIC_DEMO_PRIVATE_KEY!;

  if (!DEMO_PRIVATE_KEY) {
    throw new Error("DEMO_PRIVATE_KEY is not set");
  }

  const API_URL = `${typeof window !== 'undefined' ? window.location.origin : ''}/api/protected/weather`;

  const makeRequest = async () => {
    setLoading(true);
    setResponse(null);
    setTiming(null);

    try {
      console.log('\n🚀 Using x402axios (Simple Aptos payment wrapper)...');
      console.log('This will:');
      console.log('  1. Make request to the protected API');
      console.log('  2. Detect 402 Payment Required response');
      console.log('  3. Extract payment requirements from the 402 spec');
      console.log('  4. Build & sign payment transaction automatically');
      console.log('  5. Retry with X-PAYMENT header');
      console.log('  6. Return the response\n');

      const startTime = performance.now();
      
      // Simple! Just privateKey and url (axios-compatible interface)
      const result = await x402axios.get(API_URL, {
        privateKey: DEMO_PRIVATE_KEY,
      });
      
      const endTime = performance.now();
      const totalTime = Math.round(endTime - startTime);

      console.log('✅ x402Axios completed successfully!');

      // Extract timing headers if present
      const verificationTime = result.headers['x-verification-time'];
      const settlementTime = result.headers['x-settlement-time'];
      
      // Payment info is automatically included
      if (result.paymentInfo) {
        console.log('💰 Payment Info:', {
          transactionHash: result.paymentInfo.transactionHash,
          amount: result.paymentInfo.amount,
          recipient: result.paymentInfo.recipient,
          settled: result.paymentInfo.settled,
        });
      }

      setResponse({
        status: result.status,
        statusText: "OK",
        requestHeaders: {
          "X-PAYMENT": "Automatically handled by x402Axios"
        },
        responseHeaders: result.headers,
        body: result.data,
        transactionHash: result.paymentInfo?.transactionHash,
        paymentInfo: result.paymentInfo,
      });

      setTiming({
        total: totalTime,
        verification: verificationTime ? parseInt(verificationTime) : null,
        settlement: settlementTime ? parseInt(settlementTime) : null,
      });

      if (result.status === 200) {
        setStep("success");
      }
    } catch (err: any) {
      console.error('❌ Error during x402-axios request:', err);
      setResponse({ 
        error: err.message || String(err),
        details: err.response?.data 
      });
    } finally {
      setLoading(false);
    }
  };

  const reset = () => {
    setStep("initial");
    setResponse(null);
    setTiming(null);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-white pt-24 px-8 pb-16">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-5xl text-gray-900 mb-3 tracking-tight" style={{ fontFamily: 'Impact, "Arial Black", sans-serif' }}>
            x402 Payment Protocol Demo
          </h1>
          <p className="text-gray-500 text-sm font-light tracking-wide">HTTP 402 on Aptos Blockchain</p>
        </div>

        {/* Two Column Layout */}
        <div className="grid grid-cols-2 gap-8">
          {/* Left: Response Display */}
          <div className="bg-white/70 backdrop-blur-sm shadow-sm hover:shadow-md transition-shadow duration-300 rounded-2xl p-8 border border-gray-100">
            <h2 className="text-lg font-medium mb-6 text-gray-900 tracking-tight">
              API Response
            </h2>
            
                    {response ? (
                      <div className="space-y-6">
                        <div>
                          <p className="text-xs font-medium text-gray-500 mb-2 uppercase tracking-wider">Status</p>
                          <p className="font-mono text-gray-900 font-medium text-lg">
                            {response.status} {response.statusText}
                          </p>
                        </div>

                        {timing && (
                          <div>
                            <p className="text-xs font-medium text-gray-500 mb-2 uppercase tracking-wider">Response Time</p>
                            <div className="bg-gradient-to-br from-gray-50 to-white border border-gray-100 p-4 rounded-xl text-sm space-y-2">
                              <div className="flex justify-between items-center">
                                <span className="text-gray-600 font-light">Total</span>
                                <span className="font-mono font-semibold text-gray-900">{timing.total}ms</span>
                              </div>
                              {timing.verification && (
                                <div className="flex justify-between items-center text-xs pl-3 border-l-2 border-gray-200">
                                  <span className="text-gray-500">Verification</span>
                                  <span className="font-mono text-gray-600">{timing.verification}ms</span>
                                </div>
                              )}
                              {timing.settlement && (
                                <div className="flex justify-between items-center text-xs pl-3 border-l-2 border-gray-200">
                                  <span className="text-gray-500">Settlement</span>
                                  <span className="font-mono text-gray-600">{timing.settlement}ms</span>
                                </div>
                              )}
                              {timing.verification && timing.settlement && (
                                <div className="flex justify-between items-center text-xs pl-3 border-l-2 border-gray-200">
                                  <span className="text-gray-500">API Processing</span>
                                  <span className="font-mono text-gray-600">
                                    {timing.total - timing.verification - timing.settlement}ms
                                  </span>
                                </div>
                              )}
                            </div>
                          </div>
                        )}

                        {response.responseHeaders && (
                          <div>
                            <p className="text-xs font-medium text-gray-500 mb-2 uppercase tracking-wider">Response Headers</p>
                            <pre className="bg-gray-900 text-gray-100 p-4 rounded-xl text-xs overflow-x-auto shadow-inner font-mono leading-relaxed">
                              {JSON.stringify(response.responseHeaders, null, 2)}
                            </pre>
                          </div>
                        )}

                        <div>
                          <p className="text-xs font-medium text-gray-500 mb-2 uppercase tracking-wider">Response Body</p>
                          <pre className="bg-gray-900 text-gray-100 p-4 rounded-xl text-xs overflow-x-auto shadow-inner font-mono leading-relaxed">
                            {JSON.stringify(response.body || response.error, null, 2)}
                          </pre>
                        </div>
                      </div>
                    ) : (
                      <div className="flex items-center justify-center py-20">
                        <p className="text-gray-400 text-center font-light">
                          No response yet. Make a request to see the response here.
                        </p>
                      </div>
                    )}
          </div>

          {/* Right: Action Prompts */}
          <div className="space-y-6">
            {/* Single button - does everything */}
            {step === "initial" && (
              <div className="bg-white/70 backdrop-blur-sm shadow-sm hover:shadow-md transition-all duration-300 rounded-2xl p-8 border border-gray-100">
                <h2 className="text-lg font-medium mb-4 text-gray-900 tracking-tight">
                  Access Protected Weather API
                </h2>
          <p className="text-gray-600 mb-4 text-sm leading-relaxed font-light">
            Click below to access the protected weather API. The x402axios.get() function will automatically handle the payment if required!
          </p>
          <p className="text-gray-500 mb-6 text-xs font-light bg-gray-50 p-3 rounded-lg border border-gray-100">
            💡 Open DevTools Network tab to see 2 requests: first without payment (gets 402), then with payment (gets data)
          </p>
                <button
                  onClick={makeRequest}
                  disabled={loading}
                  className="w-full bg-gray-900 text-white px-6 py-3.5 rounded-xl font-medium hover:bg-gray-800 active:scale-[0.98] transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed shadow-sm hover:shadow"
                >
                  {loading ? "Processing (x402Axios)..." : "Request Weather API →"}
                </button>
              </div>
            )}

            {/* Success */}
            {step === "success" && (
              <div className="bg-white/70 backdrop-blur-sm shadow-sm hover:shadow-md transition-all duration-300 rounded-2xl p-8 border border-gray-100">
                <h2 className="text-lg font-medium mb-4 text-gray-900 flex items-center gap-2.5 tracking-tight">
                  <CheckCircle className="w-5 h-5 text-green-500" />
                  Payment Successful
                </h2>
                <p className="text-gray-600 mb-6 text-sm font-light leading-relaxed">
                  Payment verified and settled. The protected resource has been delivered.
                </p>
                
                {response?.transactionHash && (
                  <div className="mb-6 p-4 bg-gradient-to-br from-gray-50 to-white border border-gray-100 rounded-xl text-sm">
                    <p className="text-gray-600 mb-3 text-xs font-medium uppercase tracking-wider">
                      Transaction Hash
                    </p>
                    <code className="bg-gray-100 px-3 py-2 rounded-lg text-xs font-mono text-gray-900 break-all block mb-3 border border-gray-200">
                      {response.transactionHash}
                    </code>
                    <a
                      href={`https://explorer.aptoslabs.com/txn/${response.transactionHash}?network=${(() => {
                        const network = process.env.NEXT_PUBLIC_APTOS_NETWORK;
                        if (!network) {
                          throw new Error('NEXT_PUBLIC_APTOS_NETWORK environment variable is required');
                        }
                        return network.replace('aptos-', '');
                      })()}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 hover:text-blue-700 text-xs font-medium inline-flex items-center gap-1 transition-colors"
                    >
                      View on Explorer →
                    </a>
                  </div>
                )}
                
                <button
                  onClick={reset}
                  className="w-full bg-gray-900 text-white px-6 py-3.5 rounded-xl font-medium hover:bg-gray-800 active:scale-[0.98] transition-all duration-200 shadow-sm hover:shadow"
                >
                  Start Over →
                </button>
              </div>
            )}

            {/* Request Headers Box */}
            {response && response.requestHeaders && Object.keys(response.requestHeaders).length > 0 && (
              <div className="bg-white/70 backdrop-blur-sm shadow-sm rounded-2xl p-6 border border-gray-100">
                <h3 className="font-medium mb-3 text-gray-900 text-sm tracking-tight">
                  Request Headers
                </h3>
                <pre className="bg-gray-900 text-gray-100 p-4 rounded-xl text-xs overflow-x-auto shadow-inner font-mono leading-relaxed">
                  {JSON.stringify(response.requestHeaders, null, 2)}
                </pre>
              </div>
            )}

            {/* Info Box */}
            <div className="bg-white/70 backdrop-blur-sm shadow-sm rounded-2xl p-6 border border-gray-100">
              <h3 className="font-medium mb-4 text-gray-900 text-sm tracking-tight">
                How x402Axios works
              </h3>
              <ol className="space-y-2.5 text-xs text-gray-600 leading-relaxed">
                <li className="flex gap-3">
                  <span className="font-semibold text-gray-900 min-w-[1.25rem]">1.</span>
                  <span><strong className="text-gray-900 font-medium">Initial Request:</strong> Tries to access resource (no payment)</span>
                </li>
                <li className="flex gap-3">
                  <span className="font-semibold text-gray-900 min-w-[1.25rem]">2.</span>
                  <span><strong className="text-gray-900 font-medium">402 Detection:</strong> Server returns 402 with payment spec</span>
                </li>
                <li className="flex gap-3">
                  <span className="font-semibold text-gray-900 min-w-[1.25rem]">3.</span>
                  <span><strong className="text-gray-900 font-medium">Extract Requirements:</strong> Gets network, amount, recipient from 402</span>
                </li>
                <li className="flex gap-3">
                  <span className="font-semibold text-gray-900 min-w-[1.25rem]">4.</span>
                  <span><strong className="text-gray-900 font-medium">Build & Sign:</strong> Creates and signs transaction automatically</span>
                </li>
                <li className="flex gap-3">
                  <span className="font-semibold text-gray-900 min-w-[1.25rem]">5.</span>
                  <span><strong className="text-gray-900 font-medium">Retry with Payment:</strong> Resends request with X-PAYMENT header</span>
                </li>
                <li className="flex gap-3">
                  <span className="font-semibold text-gray-900 min-w-[1.25rem]">6.</span>
                  <span><strong className="text-gray-900 font-medium">Verification:</strong> Middleware calls facilitator to verify</span>
                </li>
                <li className="flex gap-3">
                  <span className="font-semibold text-gray-900 min-w-[1.25rem]">7.</span>
                  <span><strong className="text-gray-900 font-medium">Settlement:</strong> Facilitator submits to Aptos blockchain</span>
                </li>
                <li className="flex gap-3">
                  <span className="font-semibold text-gray-900 min-w-[1.25rem]">8.</span>
                  <span><strong className="text-gray-900 font-medium">Success:</strong> Returns resource + transaction hash</span>
                </li>
              </ol>
              <p className="text-xs text-gray-500 mt-4 font-light bg-gray-50 p-3 rounded-lg border border-gray-100">
                ✨ Just call x402Axios(&#123; privateKey, url &#125;) - that&apos;s it!
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

