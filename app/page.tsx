"use client";

import { useState } from "react";
import { Aptos, AptosConfig, Network, Account, Ed25519PrivateKey } from "@aptos-labs/ts-sdk";
import { CheckCircle } from "lucide-react";

export default function Home() {
  const [loading, setLoading] = useState(false);
  const [response, setResponse] = useState<any>(null);
  const [step, setStep] = useState<"initial" | "payment-required" | "success">("initial");
  const [paymentDetails, setPaymentDetails] = useState<any>(null);
  const [timing, setTiming] = useState<any>(null);

  // Demo private key (generated by scripts/generate-account.ts)
  const DEMO_PRIVATE_KEY = process.env.NEXT_PUBLIC_DEMO_PRIVATE_KEY || "0x21c31d63f7719d3de90b9c14b264229db65609f11f86413cb81a7ed7fcb18f3f";

  const requestWithoutPayment = async () => {
    setLoading(true);
    setResponse(null);
    setTiming(null);

    try {
      const requestHeaders: Record<string, string> = {};
      
      const startTime = performance.now();
      const res = await fetch("/api/protected/weather");
      const endTime = performance.now();
      const totalTime = Math.round(endTime - startTime);
      
      const data = await res.json();

      setResponse({
        status: res.status,
        statusText: res.statusText,
        requestHeaders,
        responseHeaders: Object.fromEntries(res.headers.entries()),
        body: data,
      });

      setTiming({
        total: totalTime,
      });

      if (res.status === 402) {
        setStep("payment-required");
        setPaymentDetails(data);
      }
    } catch (err) {
      setResponse({ error: String(err) });
    } finally {
      setLoading(false);
    }
  };

  const requestWithPayment = async () => {
    setLoading(true);
    setResponse(null);
    setTiming(null);

    try {
      if (!paymentDetails) {
        throw new Error("No payment details available");
      }

      // Initialize Aptos client
      const config = new AptosConfig({ network: Network.TESTNET });
      const aptos = new Aptos(config);

      // Create account from hardcoded private key
      const privateKey = new Ed25519PrivateKey(DEMO_PRIVATE_KEY);
      const account = Account.fromPrivateKey({ privateKey });

      // Parse the 402 response which should contain accepts array per x402 spec
      const paymentReqs = paymentDetails.accepts?.[0] || paymentDetails;
      
      // Build transaction
      const transaction = await aptos.transaction.build.simple({
        sender: account.accountAddress,
        data: {
          function: "0x1::aptos_account::transfer",
          functionArguments: [
            paymentReqs.payTo || paymentReqs.paymentAddress,
            paymentReqs.maxAmountRequired || paymentReqs.price,
          ],
        },
      });

      // Sign transaction - this returns an AccountAuthenticator
      const senderAuthenticator = aptos.transaction.sign({ signer: account, transaction });
      
      // Serialize transaction and signature separately (like Sui does)
      const transactionBytes = transaction.bcsToBytes();
      const transactionBase64 = Buffer.from(transactionBytes).toString('base64');
      
      const signatureBytes = senderAuthenticator.bcsToBytes();
      const signatureBase64 = Buffer.from(signatureBytes).toString('base64');
      
      console.log('Transaction and signature:', {
        transactionLength: transactionBytes.length,
        signatureLength: signatureBytes.length,
        transactionBase64Length: transactionBase64.length,
        signatureBase64Length: signatureBase64.length,
      });
      
      // For Aptos x402, we send transaction and signature separately (like Sui)
      const signedTxPayload = {
        signature: signatureBase64,
        transaction: transactionBase64,
      };
      
      // Create x402 PaymentPayload per official spec
      const paymentPayload = {
        x402Version: 1,
        scheme: "exact",
        network: paymentReqs.network || "aptos-testnet",
        payload: signedTxPayload,
      };
      
      // Base64 encode the PaymentPayload JSON for X-PAYMENT header
      const paymentHeader = Buffer.from(JSON.stringify(paymentPayload)).toString('base64');
      
      console.log('x402 Payment Payload:', {
        x402Version: paymentPayload.x402Version,
        scheme: paymentPayload.scheme,
        network: paymentPayload.network,
        hasSignature: !!signedTxPayload.signature,
        hasTransaction: !!signedTxPayload.transaction,
        signatureLength: signedTxPayload.signature?.length,
        txLength: signedTxPayload.transaction?.length,
        headerLength: paymentHeader.length,
      });

      // Make request with X-PAYMENT header (per x402 spec)
      const requestHeaders = {
        "X-PAYMENT": paymentHeader,
      };
      
      const startTime = performance.now();
      const res = await fetch("/api/protected/weather", {
        headers: requestHeaders,
      });
      const endTime = performance.now();
      const totalTime = Math.round(endTime - startTime);

      const data = await res.json();

      // Extract timing headers if present
      const verificationTime = res.headers.get('x-verification-time');
      const settlementTime = res.headers.get('x-settlement-time');
      
      // Extract payment response header for transaction hash
      const paymentResponseHeader = res.headers.get('x-payment-response');
      let transactionHash = null;
      if (paymentResponseHeader) {
        try {
          const paymentResponse = JSON.parse(Buffer.from(paymentResponseHeader, 'base64').toString('utf-8'));
          transactionHash = paymentResponse.settlement?.txHash;
        } catch (error) {
          console.error('Failed to parse payment response header:', error);
        }
      }

      setResponse({
        status: res.status,
        statusText: res.statusText,
        requestHeaders: {
          "X-PAYMENT": `${paymentHeader.substring(0, 50)}... (${paymentHeader.length} chars)`
        },
        responseHeaders: Object.fromEntries(res.headers.entries()),
        body: data,
        transactionHash,
      });

      setTiming({
        total: totalTime,
        verification: verificationTime ? parseInt(verificationTime) : null,
        settlement: settlementTime ? parseInt(settlementTime) : null,
      });

      if (res.ok) {
        setStep("success");
      }
    } catch (err: any) {
      setResponse({ error: err.message || String(err) });
    } finally {
      setLoading(false);
    }
  };

  const reset = () => {
    setStep("initial");
    setResponse(null);
    setPaymentDetails(null);
    setTiming(null);
  };

  return (
    <div className="min-h-screen bg-white p-8">
      <div className="max-w-7xl mx-auto">
        {/* Navbar */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-2xl font-bold text-black">
              Aptos x402
            </h1>
          </div>
          <div className="flex items-center gap-4">
            <a
              href="https://github.com/adipundir/aptos-x402"
              target="_blank"
              rel="noopener noreferrer"
              className="text-gray-700 hover:text-black transition-colors"
            >
              GitHub
            </a>
            <a
              href="https://www.npmjs.com/package/@adipundir/aptos-x402"
              target="_blank"
              rel="noopener noreferrer"
              className="text-gray-700 hover:text-black transition-colors"
            >
              NPM
            </a>
            <a
              href="/docs"
              className="bg-black text-white px-4 py-2 rounded-lg font-medium hover:bg-gray-800 transition-colors"
            >
              Docs
            </a>
          </div>
        </div>

        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-black mb-2">
            x402 Payment Protocol Demo
          </h1>
          <p className="text-gray-700">HTTP 402 on Aptos Blockchain</p>
        </div>

        {/* Two Column Layout */}
        <div className="grid grid-cols-2 gap-6">
          {/* Left: Response Display */}
          <div className="bg-gray-50 border border-black rounded-lg p-6">
            <h2 className="text-xl font-semibold mb-4 text-black">
              API Response
            </h2>
            
                    {response ? (
                      <div className="space-y-4">
                        <div>
                          <p className="text-sm text-gray-700 mb-1">Status:</p>
                          <p className="font-mono text-black font-semibold">
                            {response.status} {response.statusText}
                          </p>
                        </div>

                        {timing && (
                          <div>
                            <p className="text-sm text-gray-700 mb-1">Response Time:</p>
                            <div className="bg-white border border-gray-300 p-3 rounded text-sm space-y-1">
                              <div className="flex justify-between">
                                <span className="text-gray-600">Total:</span>
                                <span className="font-mono font-semibold text-black">{timing.total}ms</span>
                              </div>
                              {timing.verification && (
                                <div className="flex justify-between text-xs">
                                  <span className="text-gray-600">↳ Verification:</span>
                                  <span className="font-mono text-gray-700">{timing.verification}ms</span>
                                </div>
                              )}
                              {timing.settlement && (
                                <div className="flex justify-between text-xs">
                                  <span className="text-gray-600">↳ Settlement:</span>
                                  <span className="font-mono text-gray-700">{timing.settlement}ms</span>
                                </div>
                              )}
                              {timing.verification && timing.settlement && (
                                <div className="flex justify-between text-xs">
                                  <span className="text-gray-600">↳ API Processing:</span>
                                  <span className="font-mono text-gray-700">
                                    {timing.total - timing.verification - timing.settlement}ms
                                  </span>
                                </div>
                              )}
                            </div>
                          </div>
                        )}

                        {response.responseHeaders && (
                          <div>
                            <p className="text-sm text-gray-700 mb-1">Response Headers:</p>
                            <pre className="bg-black text-white p-3 rounded text-xs overflow-x-auto">
                              {JSON.stringify(response.responseHeaders, null, 2)}
                            </pre>
                          </div>
                        )}

                        <div>
                          <p className="text-sm text-gray-700 mb-1">Response Body:</p>
                          <pre className="bg-black text-white p-3 rounded text-xs overflow-x-auto">
                            {JSON.stringify(response.body || response.error, null, 2)}
                          </pre>
                        </div>
                      </div>
                    ) : (
                      <p className="text-gray-500 text-center py-12">
                        No response yet. Make a request to see the response here.
                      </p>
                    )}
          </div>

          {/* Right: Action Prompts */}
          <div className="space-y-6">
            {/* Step 1: Request without payment */}
            {step === "initial" && (
              <div className="bg-gray-50 border border-black rounded-lg p-6">
                <h2 className="text-xl font-semibold mb-3 text-black">
                  Step 1: Request Protected Resource
                </h2>
                <p className="text-gray-700 mb-4 text-sm">
                  Make a GET request to the weather API without any payment header.
                </p>
                <button
                  onClick={requestWithoutPayment}
                  disabled={loading}
                  className="w-full bg-black text-white px-6 py-3 rounded-lg font-medium hover:bg-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {loading ? "Loading..." : "Request Weather API →"}
                </button>
              </div>
            )}

            {/* Step 2: Request with payment */}
            {step === "payment-required" && (
              <div className="bg-gray-50 border border-black rounded-lg p-6">
                <h2 className="text-xl font-semibold mb-3 text-black">
                  Step 2: Pay and Retry
                </h2>
                <p className="text-gray-700 mb-4 text-sm">
                  The API returned 402 Payment Required. Now retry the request with a signed payment transaction.
                </p>
                
                {paymentDetails && (
                  <div className="mb-4 p-3 bg-white border border-gray-300 rounded text-sm">
                    {paymentDetails.accepts?.[0] ? (
                      <>
                        <p className="text-gray-700">
                          <strong>Amount:</strong> <span className="font-mono text-sm">{parseInt(paymentDetails.accepts[0].maxAmountRequired) / 100000000} APT</span>
                        </p>
                        <p className="text-gray-700">
                          <strong>Recipient:</strong> <span className="font-mono text-sm break-all">{paymentDetails.accepts[0].payTo}</span>
                        </p>
                        <p className="text-gray-700">
                          <strong>Chain:</strong> <span className="font-mono text-sm">Aptos Testnet</span>
                        </p>
                        <p className="text-gray-700">
                          <strong>Scheme:</strong> <span className="font-mono text-sm">{paymentDetails.accepts[0].scheme}</span>
                        </p>
                      </>
                    ) : (
                      <>
                        <p className="text-gray-700">
                          <strong>Amount:</strong> <span className="font-mono text-sm">{parseInt(paymentDetails.price) / 100000000} APT</span>
                        </p>
                        <p className="text-gray-700">
                          <strong>Recipient:</strong> <span className="font-mono text-sm break-all">{paymentDetails.paymentAddress}</span>
                        </p>
                        <p className="text-gray-700">
                          <strong>Chain:</strong> <span className="font-mono text-sm">Aptos Testnet</span>
                        </p>
                      </>
                    )}
                  </div>
                )}

                <button
                  onClick={requestWithPayment}
                  disabled={loading}
                  className="w-full bg-black text-white px-6 py-3 rounded-lg font-medium hover:bg-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {loading ? "Processing Payment..." : "Send Payment & Retry →"}
                </button>
              </div>
            )}

            {/* Step 3: Success */}
            {step === "success" && (
              <div className="bg-gray-50 border border-black rounded-lg p-6">
                <h2 className="text-xl font-semibold mb-3 text-black flex items-center gap-2">
                  <CheckCircle className="w-6 h-6 text-green-600" />
                  Payment Successful
                </h2>
                <p className="text-gray-700 mb-4 text-sm">
                  Payment verified and settled. The protected resource has been delivered.
                </p>
                
                {response?.transactionHash && (
                  <div className="mb-4 p-3 bg-white border border-gray-300 rounded text-sm">
                    <p className="text-gray-700 mb-2">
                      <strong>Transaction Hash:</strong>
                    </p>
                    <code className="bg-gray-100 px-2 py-1 rounded text-xs font-mono text-black break-all block mb-2">
                      {response.transactionHash}
                    </code>
                    <a
                      href={`https://explorer.aptoslabs.com/txn/${response.transactionHash}?network=testnet`}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 hover:text-blue-800 text-xs underline"
                    >
                      View on Explorer →
                    </a>
                  </div>
                )}
                
                <button
                  onClick={reset}
                  className="w-full bg-black text-white px-6 py-3 rounded-lg font-medium hover:bg-gray-800"
                >
                  Start Over →
                </button>
              </div>
            )}

            {/* Request Headers Box */}
            {response && response.requestHeaders && Object.keys(response.requestHeaders).length > 0 && (
              <div className="bg-gray-50 border border-black rounded-lg p-6">
                <h3 className="font-semibold mb-2 text-black text-sm">
                  Request Headers:
                </h3>
                <pre className="bg-black text-white p-3 rounded text-xs overflow-x-auto">
                  {JSON.stringify(response.requestHeaders, null, 2)}
                </pre>
              </div>
            )}

            {/* Info Box */}
            <div className="bg-gray-50 border border-black rounded-lg p-6">
              <h3 className="font-semibold mb-2 text-black text-sm">
                How it works:
              </h3>
              <ol className="list-decimal list-inside space-y-1 text-xs text-gray-700">
                <li>Request resource without payment</li>
                <li>Server returns 402 with payment details</li>
                <li>Client signs payment transaction</li>
                <li>Client retries with X-PAYMENT header</li>
                <li>Server verifies and settles payment</li>
                <li>Server returns protected resource</li>
              </ol>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

